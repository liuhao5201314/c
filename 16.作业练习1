#define _CRT_SECURE_NO_WARNINGS 1
//函数章节作业
//1.exc((va, v2), (v4, v4), v5, v6);
//上面式子有4个参数，由于逗号表达式v1和v2我们取v2,v4,v5,v6
//函数减少使用全局变量

//数组作业
//二维数组可以省略行不能省略列
//对数组的元素进行逆置
//方法1：自己采用中间变量交换数组内部数
//#include<stdio.h>
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int i = 0;
//	int tem = 0;
//	for (i = 0; i < 10; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	printf("\n");
//	for (i = 0; i < 5; i++)
//	{
//		tem = arr[i];
//		arr[i] = arr[9 - i];
//		arr[9 - i] = tem;
//	}
//	for (i = 0; i < 10; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//}
//写作函数形式
//#include<stdio.h>
//
//void danyin(int arr[], int sz)
//{
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	printf("\n");
//}
//void diaoyong(int arr[], int sz)
//{
//	int left = 0;
//	int right = sz - 1;
//	int tem = 0;
//	while (left < right)
//	{
//		tem = arr[left];
//		arr[left] = arr[right];
//		arr[right] = tem;
//		left++;
//		right--;
//	}
//}
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	danyin(arr, sz);
//	diaoyong(arr, sz);//数组传递为首地址
//	danyin(arr, sz);
//}
//实现数组交换
//#include<stdio.h>
//void dayin(int arr[], int sz)
//{
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	printf("\n");
//}
//void jiaohuan(int arr1[], int arr2[], int sz)
//{
//	int i = 0, j = 0;
//	int tem;
//	while (i < sz)
//	{
//		tem = arr1[i];
//		arr1[i] = arr2[j];
//		arr2[j] = tem;
//		j++;
//		i++;
//	}
//}
//int main()
//{
//	int arr1[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int arr2[10] = { 10,9,8,7,6,5,4,3,2,1 };
//	int sz = sizeof(arr1) / sizeof(arr1[0]);
//	printf("打印交换前的arr1[]=");
//	dayin(arr1, sz);
//	printf("打印交换前的arr2[]=");
//	dayin(arr2, sz);
//	jiaohuan(arr1, arr2, sz);
//	printf("打印交换后的arr1[]=");
//	dayin(arr1, sz);
//	printf("打印交换后的arr2[]=");
//	dayin(arr2, sz);
//}


//操作符作业
//求下面代码输出
//#include<stdio.h>
//int main()
//{
//	int arr[] = { 1,2,3,4,5 };//4*5=20 0001 0010 0011 0100 0101
//	short* p = (short*)arr;//2*5=10数组名表示首地址这里不用取地址了
//	int i = 0;
//	for (i = 0; i < 4; i++)//2*4=8   相当于int2个字节置为0
//	{
//		*(p + i) = 0;//0000 0000 0011 0100 0101
//	}
//	for (i = 0; i < 5; i++)
//	{
//		printf("%d ", arr[i]);//0 0 3 4 5
//	}
//	return 0;
//}
//#include<stdio.h>
//int main()
//{
//	int a = 0x11223344;//在内存中存放为44 33 22 11
//	char* pc = (char*)&a;//char 一个字节，强制转换后第一个字节44为00
//	*pc = 0;
//	printf("%x", a);//11223300
//}
//计算sizeof要求必须为无符号位数
//和sizeof进行比较要先转换位无符号位数
//#include<stdio.h>
//int i;//全局变量不初始化默认为0
//int main()
//{
//	i--;
//	//(原码)1000 0000 0000 0000 0000 0000 0000 0001---（反码）1111 1111 1111 1111 1111 1111 1111 1110--->（补码）1111 1111 1111 1111 1111 1111 1111 1111---（无符号性不为负数）
//	if (i > sizeof(i))//i要求先转换为无符号性，i为负后最高位为1数字特别大
//	{
//		printf(">");
//	}
//	else
//	{
//		printf("<");
//	}
//}
//#include<stdio.h>
//int main()
//{
//	int a = 5, b, c;
//	c = ++a;//a=6,c=6
//	b = ++c, c++, ++a, a++;//c=8 a=8 b=7
//	b += a++ + c;//b=23 a=9 c=8
//	printf("%d %d %d", a, b, c);//9 23 8
//}
//&按位与&&逻辑与


//程序练习：写一个程序统计2个整型32位的不同的个数
//#include<stdio.h>
//int main()
//{
//	int i = 0;
//	int count = 0;
//	int arr1 = 1999;
//	int arr2 = 2299;
//	for (i = 0; i < 32; i++)
//	{
//		if ((((arr1 >> i) & 1)^((arr2 >> i) & 1)) == 1)//相异为1
//		{
//			count++;
//		}
//	}
//	printf("%d", count);
//
//}
//程序练习：统计二进制1的个数
//#include<stdio.h>
//int main()
//{
//	int i = 0;
//	int count = 0;
//	int arr1 = 7;
//	for (i = 0; i < 32; i++)
//	{
//		if (((arr1 >> i) & 1)==1 )//相与为1则二进制位为1
//		{
//			count++;
//		}
//	}
//	printf("%d", count);
//}
//写作函数形式
#include<stdio.h>
//法一采用移位&1的方法
//unsigned
//int count_big_one(int a)//
//{
//	int i = 0;
//	int count = 0;
//	for (i = 0; i < 32; i++)
//	{
//		if (((a >> i) & 1) == 1)
//		{
//			count++;
//		}
//	}
//	return count;
//}
//法2采用/2的方法进行移位(缺点负数时不能进行正常工作)
//system("pause");库函数-执行暂停命令(stdlib.h)
//int count_big_one(int a)//(unsigned int a)可以解决负数问题
//{
//	int count = 0;
//	while (a>0)
//	{
//		if (a % 2 == 1)
//		{
//			count++;
//		}
//		a = a / 2;
//	}
//	return count;
//}
//法3最流弊的算法
int count_big_one(int n)
{
	int count = 0;
	while (n)
	{
		n = n & (n - 1);
		count++;
	}
	return count;
	//n=13
	//3次返回为0
	//n=1101
	//n-1=1100
	//n&n-1=1100

	//n=1100
	//n-1=1011
	//n&n-1=1000

	//n=1000
	//n-1=0111
	//0000
}
int main()
{
	int a = 0;
	printf("请输入数字求二进制1的个数");
	scanf("%d", &a);
	int count = count_big_one(a);
	printf("%d", count);
}
