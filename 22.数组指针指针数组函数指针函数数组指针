#define _CRT_SECURE_NO_WARNINGS 1

//#include<stdio.h>
//int main()
//{
//
//	char ch = 'w';
//	char* p = &ch;
//	const char* p2 = "abcdef";
//	//指针数组：存放指针的数组
//	int* arr[10];
//	//数组指针:
//	int arr2[10];
//	int(*p)[10] = &arr2;
//}

//一.一维数组传参
//#include<stdio.h>
//void test(int arr[])//可以数组形式
//{}
//void test(int* arr)//可以指针形式
//{}
//void test(int arr[10])//可以
//{}
//void test(int* arr2[20])//数组形式
//{}
//void test(int **arr)//指针形式
//{}
//int main()
//{
//	int arr[10] = { 0 };
//	int* arr2[20] = { 0 };//指针数组
//	test(arr);
//	test2(arr2);
//}
////二维数组传参
//#include<stdio.h>
//void test(int arr[3][5])//可省略行不能省略列数组形式
//{}
//void test(int (*arr)[5])//指针形式
//{}
//void test()
//{}
//int main()
//{
//	int arr[3][5] = { 0 };
//	test(arr);//二维数组传递过去为第一行的地址
//}
//#include<stdio.h>
//void print(int* p, int sz)
//{
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", *(p + i));
//	}
//}
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int* p = arr;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	print(p, sz);
//}
//参数接受的类型
//#include<stdio.h>
//void test1(int* p)
//{}
//void test2(char* ch)
//{}
//int main()
//{
//	int a = 10;//整型指针传参形式2种
//	int* p1 = &a;
//	test1(&a);
//	test1(p1);
//	char ch = 'w';//字符型指针传参形式2种
//	char* pc = &ch;
//	test2(&ch);
//	test2(pc);
//}


//二级指针传参
//第一和第二种
//#include<stdio.h>
//void test(int** pp)
//{
//	printf("%d ", **pp);
//}
//int main()
//{
//	int n = 10;
//	int* p = &n;
//	int** pp = &p;
//	test(&p);
//	test(pp);
//}
//二级传参可以传指针数组指针
//#include<stdio.h>
//void test(char **p)
//{}
//int main()
//{
//	char c = 'w';
//	char* p = &c;
//	char** pp = &p;
//	char* arr[10];//指针数组
//	test(&p);
//	test(pp);
//	test(arr);
//}


//数组指针是指向数组的指针
//函数指针是指向函数的指针--存放函数地址的指针
//#include<stdio.h>
//int add(int x, int y)
//{
//	int z = 0;
//	z = x + y;
//	return z;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	//取地址函数名和函数名都为函数的地址
//	int(*pa)(int, int) = add;//找到函数的地址
//	printf("%d ",(*pa)(2, 3));//
//	printf("%p", &add);//打印函数的地址
//	printf("%p", add);//打印函数地址
//}


//#include<stdio.h>
//void print(char* str)
//{
//	printf("%s ", str);
//}
//int main()
//{
//	void(*p)(char*) = print;
//	(*p)("hello");
//}

//(*(void(*)())0)();//把0强制转化为：void(*)()函数指针类型--0就是一个函数的地址--进行解地址调用函数，函数内参数为空
//void(*signal(int,void(*)(int)))(int)//signal为函数声明int为一个参数，void（*）（int）（函数指针）为另一个参数，函数指针指向的函数参数为int，返回类型为void
//==typedef void(*pfun_t)(int)
//+pfun_t signal(int,pfun_t)
//void(*)(int)=pfun_t

//
//#include<stdio.h>
//int add(int x, int y)
//{
//	int z = 0;
//	z = x + y;
//	return z;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	//取地址函数名和函数名都为函数的地址
//	int(*pa)(int, int) = add;//找到函数的地址
//	printf("%d ", (pa)(2, 3));//一样的
//	printf("%d ", (*pa)(2, 3));//
//	printf("%d ", (**pa)(2, 3));//
//	printf("%d ", (***pa)(2, 3));//
//}


//#include<stdio.h>
//int add(int x, int y)
//{
//	return x + y;
//}
//int sub(int x, int y)
//{
//	return x - y;
//}
//int mul(int x, int y)
//{
//	return x * y;
//}
//int div(int x, int y)
//{
//	return x / y;
//}
//int main()
//{
//	int* arr[5];
//	//需要一个数组存放4个函数==函数指针的数组
//	int(*pa)(int, int) = add;//sub,mul,div
//	int(*parr[4])(int, int) = { add,sub,mul,div };//sub,mul,div,函数指针的数组
//	int i = 0;
//	int j = 0;
//	for (i = 0; i < 4; i++)
//	{
//		j=parr[i](2, 3);//0调用加法1调用减法
//		printf("%d ", j);
//	}
//}

//char* my_strcpy(char* dest,const char* src)
//char*(*pf)(char*,const char*)=my_strcpy//函数指针
//char*(*pfrr[4])(char*,const char*)={my_strcpy,my_strcpy,my_strcpy,my_strcpy}//函数指针数组


//函数指针数组使用案例
//计算器
//#include<stdio.h>
//int add(int x, int y)
//{
//	return x + y;
//}
//int sub(int x, int y)
//{
//	return x - y;
//}
//int mul(int x, int y)
//{
//	return x * y;
//}
//int div(int x, int y)
//{
//	return x / y;
//}
//void menu()
//{
//	printf("*************************\n");
//	printf("**    1.add    2.sub   **\n");
//	printf("**    3.mul    4.div   **\n");
//	printf("******    0.exit    *****\n");
//	printf("*************************\n");
//}
//
//int main()
//{
//	int input = 0;
//	int x = 0;
//	int y = 0;
//	int(*parr[5])(int, int) = { 0,add,sub,mul,div };
//	do
//	{
//		menu();
//		printf("请选择：>");
//		scanf("%d", &input);
//		if (input >= 1 && input <= 4)
//		{
//			printf("请输入要计算的数字");
//			scanf("%d %d", &x, &y);
//			int ret = parr[input](x, y);//转移表
//			printf("%d\n", ret);
//		}
//		else if (input==0)
//		{
//			printf("退出");
//			break;
//		}
//		else
//		{
//			printf("输入错误");
//		}
//	} while (input);
//}
//int main()
//{
//	int input = 0;
//	int x = 0;
//	int y = 0;
//	int(*parr[4])(int, int) = { add,sub,mul,div };
//	do
//	{
//		menu();
//		printf("请选择：>");
//		scanf("%d", &input);
//		if (input == 0)
//		{
//			break;
//		}
//		printf("请输入数字");
//		scanf("%d %d", &x, &y);
//		switch (input)
//		{
//		case 1:printf("sum=%d\n ", (*parr[0])(x,y));//调用函数指针(*parr[0])=add
//			break;
//		case 2:printf("sum=%d\n ", sub(x, y));
//			break;
//		case 3:printf("sum=%d\n ", mul(x, y));
//			break;
//		case 4:printf("sum=%d\n ", div(x, y));
//			break;
//		case 0:
//			printf("退出程序");
//			break;
//		default:printf("输入数字错误，重新输入");
//			break;
//		}
//	} while (input);
//}

//
//回调函数
//通过函数指针调用的函数(减少重复部分)
//#include<stdio.h>
//int add(int x, int y)
//{
//	return x + y;
//}
//int sub(int x, int y)
//{
//	return x - y;
//}
//int mul(int x, int y)
//{
//	return x * y;
//}
//int div(int x, int y)
//{
//	return x / y;
//}
//void menu()
//{
//	printf("*************************\n");
//	printf("**    1.add    2.sub   **\n");
//	printf("**    3.mul    4.div   **\n");
//	printf("******    0.exit    *****\n");
//	printf("*************************\n");
//}
//void Calc(int(*p)(int, int))//通过收到的函数地址去调用使用的函数
//{
//	int x = 0;
//	int y = 0;
//	printf("请输入数字");
//	scanf("%d %d", &x, &y);
//	printf("sum=%d\n", (*p)(x, y));//我们把函数的地址传递给上面的一个指针，函数内部通过指针去调用函数，那个被调用的函数被称为回调函数
//}
//int main()
//{
//	int input = 0;
//
//	do
//	{
//		menu();
//		printf("请选择：>");
//		scanf("%d", &input);
//		switch (input)
//		{
//		case 1:
//			Calc(add);//传递函数的地址
//			break;
//		case 2:
//			Calc(sub);
//			break;
//		case 3:
//			Calc(mul);
//			break;
//		case 4:
//			Calc(div);
//			break;
//		case 0:
//			printf("退出运算");
//			break;
//		default:
//			printf("输入数字错误");
//			break;
//		}
//	} while (input);
//}
//通过函数内部调用函数
//#include<stdio.h>
//void print(char* str)
//{
//	printf("bit:%s", str);//回调函数
//}
//void test(void(*p)(char*))//接受传递的指针
//{
//	printf("test\n");
//	p("liuhao");//通过指针调用函数
//}
//int main()
//{
//	test(print);//将函数的地址传递给指针
//}
//回调函数和冒泡排序联合运用
//qsort---可以实现任意排序


//指向函数指针数组的指针
//#include<stdio.h>
//int add(int x, int y)
//{
//	return x + y;
//}
//int main()
//{
//	int arr[10] = { 0 };
//	int* arr[10];//指针数组
//	int(*p)[10] = &arr;//数组指针
//	int(*pf)(int, int);//函数指针
//	int(*ppf[4])(int, int);//函数指针数组
//	int(*(*pppf)[4])(int, int) = &ppf;//函数指针数组指针
//	//pppf为一个数组指针，指针指向数组有4个元素
//	//指向数组的每个元素类型为函数指针int(*)(int,int)
//}
