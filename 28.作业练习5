//作业15
//a:b第二，我第三
//b:我第二，e第四
//c:我第一，d第二
//d:c第五，我第三
//e:我第四，a第一
//abcde一半为真
//#include<stdio.h>
//int main()
//{
//	int a = 0;
//	int b = 0;
//	int c = 0;
//	int d = 0;
//	int e = 0;
//	for (a = 1; a <= 5; a++)
//	{
//		for (b = 1; b <= 5; b++)
//		{
//			for (c = 1; c <= 5; c++)
//			{
//				for (d = 1; d <= 5; d++)
//				{
//					for (e = 1; e <= 5; e++)
//					{
//						if (((b == 2) + (a == 3) == 1) &&
//							((b == 2) + (e == 4) == 1) &&
//							((c == 1) + (d == 2) == 1) &&
//							((c == 5) + (d == 3) == 1) &&
//							((e == 4) + (a == 1) == 1))
//						{
//							if (a*b*c*d*e == 120)
//							{
//								printf("a=%d b=%d c=%d d=%d e=%d\n", a, b, c, d, e);
//							}
//						}
//					}
//				}
//			}
//		}
//	}
//}

//作业16
//free过后指针所指向的空间被释放，但是里面所赋值是不会发生改变free(p)
//{
//int a = 0;
//int *p = a;
//free(p);
//p = NULL;//需要手动置为空指针
//}

//作业17
//char *str1 = "hello";
//char *str2 = "hello";
//str1和str2指向向相同的地址
//char str1[] = "hello";
//char str2[] = "hello";
//str1和str2指向不同的地址
//定义一个函数指针指向一个函数有二个int参数并返回一个函数指针，返回的指针指向一个int形参并返回int的函数
//int (*(*F)(int x,int y))(int)
//定义一个函数指针一个参数int*返回类型为int
//int(*fun)(int*)
//定义一个10元素的数组指针每一个元素为一个函数指针，该函数的返回值为int，参数为int*
//int (*(*p)[10])(int*)
//函数名就为函数的首地址
//&a+1为跳过整个数组指向下一位

//作业18
//旋转字符串
//abcd-->旋转一个bcda
//abcd-->旋转二个cdad
//#include<stdio.h>
//#include<string.h>
//void left_move(char* arr, int k,int sz)
//{
//	char* left = arr;
//	char* right = arr + k;
//	int i = 1;
//	char tem=*arr;
//	for (i = 0; i < sz - k; i++)
//	{
//		tem = *right;
//		*right = *left;
//		*left = tem;
//		left++;
//		right++;
//	}
//}
//int main()
//{
//	char arr[] = "abcdef";
//	int k = 0;
//	int sz =strlen(arr);
//	scanf("%d", &k);
//	left_move(arr, k, sz);
//	printf("%s", arr);
//}
//老师算法1.直接求解法
//将第一个字符提出然后将后面的字符向前移动再将提出的字符放到空余的位置
//#include<stdio.h>
//#include<string.h>
//#include<assert.h>
//void left_move(char* arr, int k)
//{
//	assert(arr != NULL);
//	int i = 0;
//	int len = strlen(arr);
//	for (i = 0; i < k; i++)
//	{
//		//左旋转一个字符
//		char tmp = *arr;//将第一位提出
//		int j = 0;//其他位向前进行移动
//		for (j = 0; j < len-1; j++)//
//		{
//			*(arr + j) = *(arr + j + 1);
//		}
//		*(arr + len - 1) = tmp;//再将第一位放到最后一位
//	}
//}
////三部翻转法
////abcdef
////ba fedc 先把左边对于的k各字符进行逆序，右边再进行逆序
////cdef ab 再把整体进行逆序
//void reverse(char *left, char *right)
//{
//	assert(left);
//	assert(right);
//	while (left < right)
//	{
//		char tmp = *left;
//		*left = *right;
//		*right = tmp;
//		left++; right--;
//	}
//}
//void left_move1(char* arr, int k)
//{
//	assert(arr);
//	int len = strlen(arr);
//	assert(k <= len  );//不能超过字符串本身长度
//	reverse(arr, arr + k - 1);
//	reverse(arr + k, arr + len - 1);
//	reverse(arr, arr + len - 1);
//}
//int main()
//{
//	char arr[] = "abcdef";
//	int k = 0;
//	scanf("%d", &k);
//	left_move1(arr, k);
//	printf("%s", arr);
//}
//

//作业19
//判断一个字符串是否为旋转后的字符串
//aabcd 
//aabc d
//cbaa d
//d aabc
//#include<stdio.h>
//#include<string.h>
//#include<assert.h>
//void reverse(char *left, char *right)
//{
//	assert(left);
//	assert(right);
//	while (left < right)
//	{
//		char tmp = *left;
//		*left = *right;
//		*right = tmp;
//		left++; right--;
//	}
//}
//void left_move(char* arr, int k)
//{
//	assert(arr);
//	int len = strlen(arr);
//	assert(k <= len  );//不能超过字符串本身长度
//	reverse(arr, arr + k - 1);
//	reverse(arr + k, arr + len - 1);
//	reverse(arr, arr + len - 1);
//}
//int is_left_move(char* arr1, char* arr2)
//{
//	int len = strlen(arr1);
//	int i = 0;
//	for (i = 0; i < len; i++)
//	{
//		left_move(arr1, 1);
//		int ret = strcmp(arr1, arr2);
//		if (ret == 0)
//		{
//			return 1;
//		}
//	}
//	return 0;
//}
//int main()
//{
//	char arr1[] = "abcdef";
//	char arr2[] = "cdefab";
//	int ret = is_left_move(arr1, arr2);
//	if (ret == 1)
//	{
//		printf("为旋转后的字符");
//	}
//	else
//	{
//		printf("不是旋转函数");
//	}
//}
//新函数追加函数
//老师算法abcdef变为abcdefabcdef这样就包含了所有的可能性
//strcat追加函数  stdio.h
//不能自己给自己追加
//strncat追加函数 可以自己确定追加的数目

//#include<stdio.h>
//#include<string.h>
//int is_left_move(char* arr1, char* arr2)
//{
//	int len1 = strlen(arr1);
//	int len2 = strlen(arr2);
//	if (len1 != len2)
//	{
//		return 0;//排除掉长度不相同的情况
//	}
//	//arr1追加arr1，然后判断arr2指向的字符串是不是等于arr1
//	strncat(arr1, arr1, len);
//	char* ret = strstr(arr1, arr2);//找子串,找到返回地址arr2首元素，没有找到返回空指针
//	if (ret == NULL)
//	{
//		return 0;
//	}
//	else
//	{
//		return 1;
//	}
//}
//int main()
//{
//	char arr1[30] = "abcdef";
//	char arr2[] = "cdefab";
//	int ret = is_left_move(arr1, arr2);
//	if (ret == 1)
//	{
//		printf("yes");
//	}
//	else
//	{
//		printf("no");
//	}
//}


//杨式矩阵
//有一个数字矩阵，矩阵的每行从左到右递增，从上到下递增
//找到对应的数字但是不能使用全部查询的方法
//先找一行最大的再找一列最大的从右下开始寻找
//1 2 3
//4 5 6
//7 8 9
#include<stdio.h>
int fand(int arr[3][3], int k , int* row , int* col)
{
	int ret = 0;
	int x = 0;
	int y = *col - 1;
	while (x < *row && y >=0)
	{
		if (arr[x][y] > k)
		{
			y--;
		}
		else if (arr[x][y] < k)
		{
			x++;
		}
		else
		{
			*row = x;
			*col = y;
			//printf("下标为%d %d", x, y);//找到还要返回坐标  但是这样书写不符合函数的要求
			return 1;
		}
	}
	return 0;
}
int main()
{
	int arr[3][3] = { {1,2,3},{4,5,6},{7,8,9} };
	int k = 4;
	int x = 3;
	int y = 3;
	//返回型参数，取地址进行传递
	int ret = fand(arr, k, &x, &y);
	if (ret == 1)
	{
		printf("yes 行%d 列%d", x, y);
	}
	else
	{
		printf("no");
	}
}
