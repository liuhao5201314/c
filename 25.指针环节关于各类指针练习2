//练习4
//#include<stdio.h>
//int main()
//{
//	int a[3][2] = { (0,1),(2,3),(4,5) };//=1，3，5，0，0，0
//	int* p;//
//	p = a[0];//第一行(0,1)
//	printf("%d", p[0]);//1 逗号表达式为最后一位结果
//}
//练习5
//#include<stdio.h>
//int main()
//{
//	int a[5][5];
//	int(*p)[4];
//	p = a;//第一行的地址(*)4!=(*)[5]
//	printf("%p,%d", &p[4][2] - &a[4][2], &p[4][2] - &a[4][2]);//-4的源码，和-4
//	//p[4][2]==*(*(p+4)+2)  00000 00000 00000 00000 00000
//	//                      p  p+1  p+2  p+3   p+4    a[4][2],相差了4位地址
//}
//练习6
//#include<stdio.h>
//int main()
//{
//	int aa[2][5] = { 1,2,3,4,5,6,7,8,9,10 };//1,2,3,4,5/6,7,8,9,10
//	int* ptr1 = (int*)(&aa + 1);//
//	int* ptr2 = (int*)(*(aa + 1));//==aa[1]表示第二行首元素地址
//	printf("%d %d", *(ptr1 - 1), *(ptr2 - 1));//10,5
//}
//int arr[10] = { 1,2,3,4,5 };
//int* p = arr;
//*(p+2)==p[2]==*(arr+2)==arr[2]
//练习7
//#include<stdio.h>
//int main()
//{
//	char* a[] = "abcde";//存放首地址a的地址
//	char* a[] = { "work","at","alibaba" };//
//	char* *pa = a;//*pa为首地址"word"char** p一个*表明这个pa为一个指针，第二个*表明这是一个指向char*型的指针
//	pa++;//跳过一个char*
//	printf("%s", *pa);//at
//}
//练习8
//#include<stdio.h>
//int main()
//{
//	char* c[] = { "ENTER","NEW","POINT","FIRST" };
//	char** cp[] = { c + 3,c + 2,c + 1,c };
//	char*** cpp = cp;//cp首地址
//	printf("%s\n", **++cpp);//POINT cpp+++已经进行了就要进行保留  cpp-->c+2
//	//printf("%s\n", **++cpp+3);//*高于+   NT    
//	printf("%s\n", *--*++cpp + 3);//*高于+   (*(--*(++cpp)))+3=ER   cpp->c+1然后c+1进行减1变为c指向了地址c对应的ENTER然后加3
//	printf("%s\n", *cpp[-2]+3);//**(cpp-2)+3=ST   cpp->c+3
//	printf("%s\n", cpp[-1][-1]+1);//  *(*(cpp-1)-1)+1==cpp->c+2-1=c+1--->EW
//}
