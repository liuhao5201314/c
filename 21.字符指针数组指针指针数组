#define _CRT_SECURE_NO_WARNINGS 1
//指针的进阶

//一.字符指针
#include<stdio.h>
int main()
{
	char arr[] = "abcde";
	char* p = arr;//存放数组首地址
	printf("%s", arr);
	printf("%s", p);//打印指针地址所指向的数组，%d才是指向数组的地址
	//指针变量p的值是地址，地址指向的位置是个char数组，%s输出的是p指向的数组，如果你用%d输出p，才是输出地址值
}
//#include<stdio.h>
//int main()
//{
//	char ch = 'w';
//	char arr[] = "abcdef";
//	char* p = "abcdef";//这里指针只有4个字节//表示一个常量字符串,这里把a的地址给p=const char* p="abcde";
//	//*p = 'w';//*p为常量字符串不能进行改变
//	char* pc = &ch;
//	char* pd = arr;//存放字符串的地址
//	printf("%s", p);
//
//}
//#include<stdio.h>
//int main()
//{
//	char arr1[] = "abcdef";
//	char arr2[] = "abcdef";
//	char* p1 = "abcdef";
//	char* p2 = "abcdef";
//	//if (arr1 == arr2)//2,地址一定是不一样的
//	if(p1==p2)//1,常量字符串因为p1和p2相同所以p1和p2同时指向了同一块地址
//	{
//		printf("1");
//	}
//	else
//	{
//		printf("2");
//	}
//}


//第二.指针数组
//指针数组是数组，是用来存放指针的
//#include<stdio.h>
//int main()
//{
//	int arr[10] = { 0 };//整型数组
//	char ch[5] = { 0 };//字符数组
//	int* arr1[4];//存放整型指针的数组
//	char* arr2[5];//存放字符指针数组
//
//}
//#include<stdio.h>
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int c = 30;
//	int d = 40;
//	int* arr[4] = { &a,&b,&c,&d };
//	int i = 0;
//	for (i = 0; i < 4; i++)
//	{
//		printf("%d ", *(arr[i]));
//	}
//}
//#include<stdio.h>
//int main()
//{
//	int arr1[] = { 1,2,3,4,5 };
//	int arr2[] = { 2,3,4,5,6 };
//	int arr3[] = { 3,4,5,6,7 };
//	int* parr[] = { arr1,arr2,arr3 };
//	int i = 0;
//	for (i = 0; i < 3; i++)
//	{
//		int j = 0;
//		for (j = 0; j < 5; j++)
//		{
//			printf("%d ", *(parr[i] + j));
//		}
//	}
//}

//第三.数组指针
//#include<stdio.h>
//int main()
//{
//	int *p = NULL;//整型指针，指向整型的指针，可以存放整型的地址
//	char* pc = NULL;//字符指针，指向字符的指针，可以存放字符的地址
//	//数组指针指向数组的指针，可以存放数组的地址
//	int arr[10] = { 0 };
//	//arr为首元素地址
//	//&arr[0]首元素地址
//	//&arr数组的地址
//	int arr1[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int(*p)[10] = &arr;//这里的p就是数组指针
//}
//练习
//#include<stdio.h>
//int main()
//{
//	char* arr[5];//存放字符的指针数组
//	char* (*pa)[5] = &arr;//字符型指针数组的指针
//	//pa为数组指针，pa指向的元素类型为char*
//	//      *说明pa为指针，[5]pa指向数组5个元素
//	int arr2[10] = { 0 };
//	int(*pa)[10] = &arr2;
//}


//使用数组指针打印数组
//#include<stdio.h>
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int(*p)[10] = &arr;
//	int i = 0;
//	for (i = 0; i < 10; i++)
//	{
//		printf("%d ", (*p)[i]);//*p=arr(数组首地址)
//		printf("%d ", *(*p + i));
//	}
//}
//二维数组
//#include<stdio.h>
////print1表达的是数组型进行显示将一个数组按照要求进行打印
//void print1(int arr[3][5], int i, int j)
//{
//	int x = 0;
//	int y = 0;
//	for (x = 0; x < i; x++)
//	{
//		for (y = 0; y < j; y++)
//		{
//			printf("%d ", arr[x][y]);
//		}
//		printf("\n");
//	}
//}
////print2采用的是地址，将二维数组当作一维数组进行表达，进行解指针显示
//void print2(int (*p)[5], int x, int y)
//{
//	int k = 0;
//	for (k = 0; k < x; k++)
//	{
//		int m = 0;
//		for (m = 0; m < y; m++)
//		{
			//printf("%d ", *(p[i] + j));
			//printf("%d ", p[i][j]);
//			//printf("%d ", *(*(p + k) + m));//找到第几个数字进行解指针找到数字
//			printf("%d ", (*(p + k))[m]);//p+i找到那一行的地址进行解引用再和列进行结合
//		}
//		printf("\n");
//	}
//}
//int main()
//{
//	int arr[3][5] = { {1,2,3,4,5},{2,3,4,5,6},{3,4,5,6,7} };
//	print1(arr, 3, 5);
//	print2(arr, 3, 5);
//}
//数组指针的多种输出方式
//#include<stdio.h>
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int i = 0;
//	int* p = arr;//首元素地址
//	for (i = 0; i < 10; i++)
//	{
//		printf("%d ", *(p + i));
//		printf("%d ", *(arr + i));
//		printf("%d ", arr[i]);//arr[i]=*(p+i)=*(arr+i)
//		printf("%d ", p[i]);
//	}
//}
//#include<stdio.h>
//int main()
//{
//	int arr[5];//arr是一个5个元素的数组
//	int *parr1[10];//parr1是一个数组，数组有10个元素，每个元素都为int* parr1的指针数组
//	int(*parr2)[10];////parr2为一个指针，该指针指向了一个数组，数组有10个元素，每个元素的类型为int
//	int(*parr3[10])[5];//parr3表示一个数组,该数组有10个元素，每个元素是一个指针，该数组指针指向的数组有5个元素，每个元素为Int
//}
