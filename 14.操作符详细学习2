//6.关系操作符
//> >= <= < != ==


//7.逻辑操作符
//&& 逻辑与全真为真 左边为假右边就不会进行运算了
//|| 一真为真 左边一个为真就不会进行运算了
//#include<stdio.h>
//int main()
//{
//	int i = 0, a = 0, b = 2, c = 3, d = 4;
//	//i = a++&&++b&&d++;
//	i = a++ || ++b || d++;
//	printf(" a=%d\n b=%d\n c=%d\n d=%d\n i=%d\n",a,b,c,d,i);//1 2 3 4 0
//}


//8.条件操作符
//exp1?exp2:exp3
//#include<stdio.h>
//int main()
//{
//	int a = 0;
//	int b = (a > 5) ? 3 : -3;
//	printf("%d", b);
//}


//9.逗号表达式
//用逗号隔开的多个表达式，从左向右依次计算，整个表达式的结果为最后一个表达式的结果
//#include<stdio.h>
//int main()
//{
//	int a = 1;
//	int b = 2;
//	int c = (a > b, a = b + 10, a, b = a + 1);
//	printf("%d", c);//13
//}
//#include<stdio.h>
//int main()
//{
//	int a;
//	a = get_val();
//	count_val(a);
//	while (a > 0)
//	{
//		//业务处理
//		a = get_val();
//		count_val(a);
//	}
//
//	//或者下面公式等于上面公式
//	while (a = get_val(), count_val(a), a > 0)
//	{
//		//业务处理
//	}
//}



//10.下标引用操作符[]   函数调用操作符   结构成员
//a[10] a[]被称为下标引用操作符的操作数
//函数调用操作符()---调用函数的时候()就是函数调用操作符---函数名和内部数称为函数调用操作符的操作数
//结构成员---结构体类型
////->结构体指针操作符  结构体指针->成员名
//#include<stdio.h>
////创建一个结构体类型struct stu
//struct stu
//{
//	char name[20];
//	int age;
//	char id[20];
//};
////使用struct stu 创建一个学生对象
//int main()
//{
//	struct stu s1 = { "刘浩",22,"201807124209" };
//	struct stu* ps = &s1;//定义指针指向地址
//	printf("%s\n", (*ps).name);//解指针再.name
//	printf("%s\n", ps->name);//指针指向我们要的信息
//	printf("%s\n%d\n%s", s1.name,s1.age,s1.id);
//}


//11.表达式求值
//隐式类型转换：（整型提升）按高位补充
//#include<stdio.h>
//int main()
//{
//	char a = 3;//00000000000000000000000000000011--->  00000011整型提升后00000000000000000000000000000011
//	char b = 127;//00000000000000000000000001111111--->01111111          00000000000000000000000001111111
//	char c = a + b;//相加0000000000000000000000010000010----100000010---->整型提示111111111111111111111111110000010---->1111111111111111111111111100000001--->100000000000000000000000011111110=-126
//	printf("%d", c);//                                                               补码                                     反码
//}
//整型提示的案件
//#include<stdio.h>
//int main()
//{
//	char a = 0xb6;//1011 0110----1111 1111 1111 1111 1111 1111 1011 0110
//	short b = 0xb600;//1011 0110 0000 0000---1111 1111 1111 1111 1011 0110 0000 0000
//	int c = 0xb6000000;//1011 0110 0000 0000 0000 0000 0000 0000 0000
//	if (a == 0xb6)
//	{
//		printf("a");
//	}
//	if (b == 0xb600)
//	{
//		printf("b");
//	}
//	if (c == 0xb6000000)
//	{
//		printf("c");
//	}
//}
//%u=unsigned int输出
//#include<stdio.h>
//int main()
//{
//	char c = 1;
//	printf("%u\n", sizeof(c));//1
//	printf("%u\n", sizeof(+c));//4
//	printf("%u\n", sizeof(!c));//1
//}
//隐式类型转换：（算术转换）
//long double/double/float/unsigned long int/long int/unsigned int/int


//12.操作符的属性
//复杂操作符的求值有3个影响因素
//1.操作符有优先级2.操作符有结合性3.是否控制求值顺序
//操作符顺序表
//保证计算过程唯一
