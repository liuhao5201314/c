#define _CRT_SECURE_NO_WARNINGS 1
//函数进阶
//#include<string.h>//头文件
//1.strlen求长度函数
//不包含"\0"
//#include<stdio.h>
//int my_strlen()
////1.计数器方法
////2.指针-指针
////3.递归
//int my_strlen(const char* str)//计数器法
//{
//	int count = 0;
//	assert(str != NULL);
//	while (*str != '\0')//while(*str)
//	{
//		count++;
//		str++;
//	}
//	return count;
//}
//int main()
//{
//	int len = strlen("abcdef");//可以得到数字6因为字符中包含了"\0"
//	char arr[] = { 'a','b','c' };
//	int lon = strlen(arr);//没有"\0"不能得到数字
//}
//if (strlen("abc") - strlen("abcdef") > 0)
//{
//	printf("hehe");
//}
//else
//{
//	printf("haha");
//}
////主要stlen返回的类型为无符号型所以这里的-3被无符号后变为了整数结果输出为hehe
//size_t strlen(const char* string)
//rsize_t=unsigned int

//二.strcpy拷贝函数
//返回值为char*
//会将'\0'一起拷贝过去
//#include<stdio.h>
//#include<assert.h>
//void my_strcpy(char* dest, const char* src)
//{
//	assert(dest != NULL);
//	assert(src != NULL);
//	//while (*src)//遇到'\0'则停止
//	//{
//	//	*dest = *src;
//	//	src++;
//	//	dest++;
//	//}
//	while (*dest++ = *src++)
//	{
//		;
//	}
//}
//char* my_strcpy(char* dest,const char*src)//满分
//{
//	assert(dest != NULL);
//	assert(src != NULL);
//	char* ret = dest;
//	while (*dest++ = *src++)
//	{
//		;
//	}
//	return ret;
//}
//int main()
//{
//	char arr1[] = "abcdef";
//	char arr2[] = "ghijk";//要拷贝的字符必须包含\0且接受拷贝的字符要有足够的空间大小
//	//错误的书写
//	//const char* arr1 = "abcdef";//常量字符串为字符串首地址不能进行改变
//	//char arr2[] = { 'a','b','c' };//没有停止符号
//	my_strcpy(arr1, arr2);
//	printf("%s", arr1);
//}
//将后者拷贝到前者
//源字符必须以\0结尾
//必须将源文件的\0拷贝到目标空间
//目标空间必须足够大
//目标空间必须内的字符必须可以允许改变
//学会模拟strcpy函数


//第三.strcat追加函数
//strncat追加指定字符(arr1,arr2,5)
//#include<stdio.h>
//#include<string.h>
//int main()
//{
//	char arr1[20] = "hello\0xxxxx";
//	char arr2[] = "word";
//	strcat(arr1, arr2);
//	printf("%s", arr1);
//}
//源文件和目标字符必须有\0，因为是从目标字符的\0开始追加
//目标空间必须足够的大
//目标空间可以修改
//模拟strcat
//#include<stdio.h>
//#include<string.h>
//#include<assert.h>
//void my_strcat(char arr1[],const char arr2[])
//{
//	assert(arr1);
//	assert(arr2);
//	int len1=strlen(arr1);
//	int len2 = strlen(arr2);
//	int i = 0;
//	for (i = 0; i < len2; i++)
//	{
//		arr1[len1+i] = arr2[i]; 
//	}
//}
////地址的算法返回一个地址进行打印
//char* my_strcat2(char* arr1, char* arr2)
//{
//	char* ret = arr1;
//	assert(arr1);
//	assert(arr2);
//	int len1 = strlen(arr1);
//	int len2 = strlen(arr2);
//	while (*arr1 != '\0')
//	{
//		arr1++;
//	}
//	while (*arr1++ = *arr2++)
//	{
//		;
//	}
//	return ret;
//}
//
//int main()
//
//{
//	char arr1[20] = "hello";
//	char arr2[] = "word";
//	my_strcat2(arr1, arr2);
//	printf("%s", arr1);
//}

//四.strcmp字符串比较
//第一个字符串大于第二个字符串返回>0等于返回0，小于返回<0
//返回值会和编译器不同而改变
//#include<stdio.h>
//#include<string.h>
//int main()
//{
//	char *p1 = "abcdef";
//	char *p2 = "sqwer";
//	int ret = strcmp(p1, p2);//比较二个函数是否相等，从第一个开始进行比较相等就下一位比较直到二个字符到\0为止相等就返回0二个字符相等
//	if (ret > 0)
//	{
//		printf(">");
//	}
//	else if (ret < 0)
//	{
//		printf("<");
//	}
//	else
//	{
//		printf("=");
//	}
//}
//模拟输出
//#include<stdio.h>
//#include<string.h>
//#include<assert.h>
//int my_strcmp1(const char* p1,const char* p2)
//{
//	assert(p1);
//	assert(p2);
//	while (*p1 != '\0'&&*p2 != '\0')
//	{
//		int x = (int)*p1;
//		int y = (int)*p2;
//		if (x > y)
//		{
//			return 1;
//		}
//		else if (x < y)
//		{
//			return -1;
//		}
//	
//		p1++;
//		p2++;
//	}
//	if (*p1 == '\0')
//	{
//		return -1;
//	}
//	if (*p2 == '\0')
//	{
//		return 1;
//	}
//	return 0;
//}
////老师的方法改进了，更加简单字符是可以直接进行比较的，
//int my_strcmp2(const char* str1, const char* str2)
//{
//	assert(str1&&str2);
//	while (*str1 == *str2)
//	{
//		if (*str1 == '\0')
//		{
//			return 0;
//		}
//		str1++;
//		str2++;
//	}
//	if (*str1 > *str2)//return *str1-*str2;
//		return 1;
//	else
//		return -1;
//}
//int main()
//{
//	char *p1 = "abcde";
//	char *p2 = "abcdef";
//	int ret = my_strcmp2(p1, p2);
//	if (ret > 0)
//	{
//		printf(">");
//	}
//	else if (ret < 0)
//	{
//		printf("<");
//	}
//	else
//	{
//		printf("=");
//	}
//}
//strcpy/strcat/strcmp长度不受限制
//strncpy/strncat/strncmp长度受限制


//五.strncpy拷贝函数
//char *strncpy(char* p1,const char* p2,size_t count)
//#include<stdio.h>
//#include<string.h>
//#include<assert.h>
////char* my_strncpy(char* dest, const char* src,int k)
////{
////	assert(dest != NULL);
////	assert(src != NULL);
////	char* ret = dest;
////	while (k && (*dest++ = *src++))
////	{
////		k--;
////	}
////	if (k != 0)
////	{
////		while (k)
////		{
////			k--;
////			*dest = '\0';
////		}
////	}
////	return ret;
////}
//int main()
//{
//	char arr1[6] = "abcdh";
//	char arr2[] = "defg";
//	strncpy(arr1, arr2, 4);//'\0'不会进行拷贝过去只会拷贝指定的大小
//	//char arr1[] = "abdfgfd";
//	//char arr2[] = "bit";
//	//strncpy(arr1, arr2, 6);//多余的就会将剩余用\0拷贝过去
//	printf("%s", arr1);
//}
////模拟实现

//六.strncat追加函数
//char* strncat(char* p1, const char* p2, size_t count)
//追加会自动从\0开始追加且追加后会自动补充\0
//追加过程中追加函数如果没有那么长就会追加完字符自动结束加\0
//#include<stdio.h>
//#include<string.h>
//int main()
//{
//	char arr1[30] = "hello";//
//	char arr2[] = "world";
//	strncat(arr1, arr2, 3);
//	printf("%s", arr1);
//}
//模拟输出
