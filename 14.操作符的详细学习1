#define _CRT_SECURE_NO_WARNINGS 1
//操作符和表达式详细学习
//1.算数操作符：+ - * / % 加 减 乘 除 取模（必须左右都为整数）

//2.移位操作符
//>> << 移动的为二进制位
//右移操作符：1.算术右移：右边丢弃左边补原符号位（为正0为负1）(/2)
//            2.逻辑右移：右边丢弃，左边补0
/*
#include<stdio.h>
int main()
{
	//               1000000000000100--->1000000000000011---->1111111111111100---->11111111111111110---->10000000000000001------>10000000000000010----->-2
	int a = -4;//补码1000000000000001--->1000000000000000--->11111111111111111111---->11111111111111111111---->10000000000000000--->1000000000000001-----=-1
	int b = 0;
	b = a >> 1;//0100
	printf("%d", b);//存储为补码，输出为源码
}
*/
//整数有源码，反码，补码
//存储为补码
//正整数源码，反码，补码相同
//反码符号位不变其余取反，补码为反码加一
//1000000000000001--->1111111111111110--->1111111111111111--->1111111111111111---->1111111111111110--->1000000000000001=-1
//-1源码--------------->-2反码-------------1补码------------->右移位后的补码---->进行-1得到移位后的反码-->进行取反得到源码--->进行输出为-1
//左移操作符：左边丢弃，右边补0（*2）
//不能移动负移位a>>-1

//3.位操作符（操作必须为整数）位为二进制位
//&按位与    全1才1
//|按位或    有1就1
//^按位异或  相同为0不同为1
/*
#include<stdio.h>
int main()\
{
	int a = 3;
	int b = 5;
	int c = 0;
	c = a ^ b;//0011&0101=0001   0011|0101=0111   0011^0101=0110
	printf("%d", c);
}
*/
//题目：不创建临时变量(第三变量)实现二个数的交换
//执行效率不高只是学习这样的想法
/*
#include<stdio.h>
int main()
{
	int a = 3;
	int b = 5;
	//加减法 存在缺陷超出范围就失效了
	//a=a+b;
	//b=a-b;
	//a=a-b;

	//异或法 
	a = a ^ b;//0011  0101=0110
	b = a ^ b;//0110  0011=0101
	a = a ^ b;//0110  0101=0011
	printf("a=%d  b=%d\n", a, b);
	return 0;
}
*/
//题目：编写一个代码求一个整数存储在内存中的二进制中1的个数。
//对于负数的统计存在问题(当采用%2和/2法时)
/*
#include<stdio.h>
int main()
{
	int num = 4;
	int count = 0;
	//while (num)//0就退出
	//{
	//	if (num % 2 == 1)
	//	{
	//		count++;
	//	}
	//	num = num / 2;
	//}
	//num&1==1则数有一个1（0001）
	//再将Num进行移位再和1进行&操作就可以得到下一位的情况
	int i = 0;
	for (i = 0; i < 32; i++)
	{
		if (((num >> i) & 1) == 1)
		{
			count++;
		}
	}
	printf("%d", count);
}
*/


//4.赋值操作符
//=
//复合幅值符
//+= -= *= /= %= >>= <<= &= |= ^=
/*
#include<stdio.h>
int main()
{
	int a = 2;
	a += 2;
	a = a + 2;

	a >>= 1;
	a = a >> 1;

	a &= 1;
	a = a & 1;
}
*/


//5.单目操作符
//只有一个操作数
//!(真假取反) ~ - + &（取地址） sizeof(求变量所占内存空间的大小注意字符情况下包含\0 strlen不包含\0求字符串长度) -- ++ *(解指针) （int 强制类型转换）
//sizeof里面的公式是不会进行运算的
//#include<stdio.h>
//int main()
//{
//	int a = 10;
//	int* p = &a;//指针取地址
//	*p;//解指针
//}
//数组也是有类型的除开数组名的部分其他全为数组类型
/*
#include<stdio.h>
#include<string.h>
int main()
{
	//char a[] = "abc";
	//char c[] = { 'a','b','c' };
	//int b = sizeof(c);
	//int d = strlen(c);//strlen(c)没有\0就无法停止
	//printf("%d", d);
	int a = 10;
	char c = 'r';
	char* p = &c;
	int arr[10] = { 0 };

	printf("%d\n", sizeof(a));//4
	printf("%d\n", sizeof(int));

	printf("%d\n", sizeof(c));//1
	printf("%d\n", sizeof(char));

	printf("%d\n", sizeof(p));//4
	printf("%d\n", sizeof(char*));

	printf("%d\n", sizeof(arr));//40
	printf("%d\n", sizeof(int [10]));
}
*/
//#include<stdio.h>
//int main()
//{
//	short s = 0;
//	int a = 10;
//	printf("%d\n", sizeof(s = a + 5));//2  整型加5放入短整型还是为短整型
//	printf("%d\n", s);//0
//}
//~按位取反
//0---000000000000000000000000000000000---1111111111111111111111111111111111----11111111111111111111111111111110-------------1000000000000000000000000001---=-1
//11--1011&0100=1111                                               补码
//   改变第三位0为1              
//#include<stdio.h>
//int main()
//{
//	int a = 11;
//	a = a | (1 << 2);//15
//	printf("%d\n", a);
//	a = a & (~(1 << 2));
//	printf("%d\n", a);//11
//}
//++a先加加后赋值a++先赋值后加减
