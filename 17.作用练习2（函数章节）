//程序练习;获取一个整数二进制中偶数和奇数分别打印二进制序列
//写的为原码，存储为补码，输出为原码
//#include<stdio.h>
//void print(int a)
//{
//	int i = 0; int j = 0;
//	int x = 0; int y = 0;
//	printf("偶数");
//	for (i = 31; i >0; )
//	{
//		x = (a >> i) & 1;
//		printf("%d ", x);
//		i = i - 2;
//	}
//	printf("\n");
//	printf("奇数 ");
//	for (j = 30; j >=0; )
//	{
//		y = (a >> j) & 1;
//		printf("%d ", y);
//		j = j - 2;
//	}
//}
//int main()
//{
//	int a = 0;
//	scanf("%d", &a);
//	print(a);
//}


//程序练习：不使用第三变量实现交换
//#include<stdio.h>
//int main()
//{
//	int a = 3;
//	int b = 5;
//	a = a ^ b;//0011  0101=0110
//	b = a ^ b;//0110  0011=0101
//	a = a ^ b;//0110  0101=0011
//	printf("%d %d", a, b);
//}



//程序练习：打印数组使用指针不使用数组下标
//#include<stdio.h>
//void print(int* arr,int sz)//int* arr=int arr[]
//{
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", *(arr + i));
//	}
//}
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	print(arr, sz);
//}


//输出一个任意的乘法表
//#include<stdio.h>
//int main()
//{
//	int i = 0;
//	int j = 0;
//	int sum = 0;
//	int hang = 0;
//	printf("请输入乘法表行列数");
//	scanf("%d", &hang);
//	for (i = 1; i <= hang; i++)//控制行
//	{
//		//控制行打印数
//		for (j = 1; j <= i; j++)//采用i<j这样可以确定每一行的个数空余的就不进行打印
//		{
//			printf("%d*%d=%-4d ", i, j, i*j);//%2d这样可以保证打印2位可以用于方便数字右对齐，%-2d为左对齐，空余部分的会自动打印空格
//		}
//		printf("\n");
//	}
//}


//将一段字符进行逆序打印
//#include<stdio.h>
//#include<string.h>
//
//void reverse_string(char arr[],int sz)
//{
//	int i = 0;
//	char tem = 0;
//	for (i = 0; i <= (sz / 2); i++)
//	{
//		tem = arr[i];
//		arr[i] = arr[sz - i];
//		arr[sz - i] = tem;
//	}
//	for (i = 0; i <= sz; i++)
//	{
//		printf("%c", arr[i]);
//	}
//}
//
//int main()
//{
//	char arr[] = "abcdefg";
//	int sz = strlen(arr);
//	reverse_string(arr,sz);
//}
//法二:不使用strlen自己编写一个strlen
//3种方法，计数器，递归，指针-指针
//#include<stdio.h>
//#include<string.h>
////计数器方法
//
int my_strlen(char* str)
{
	int count = 0;
	while (*str != 0)
	{
		count++;
		str++;
	}
	return count;
}
//
//void reverse_string(char arr[])
//{
//	int left = 0;
//	int right = my_strlen(arr) - 1;
//	while (left < right)
//	{
//		int tem = arr[left];
//		arr[left] = arr[right];
//		arr[right] = tem;
//		left++;
//		right--;
//	}
//}
//
//int main()
//{
//	char arr[] = "abcdefg";
//	int sz = strlen(arr);
//	reverse_string(arr);
//	printf("%s", arr);
//}
//法三，采用递归
//交换a和f其他加上再处理b和e
//第一步a取出存放到tem,第二步将f放入a,第三步#将bcde进行逆序，第四步将tem放入f位置
//#include<stdio.h>
//void reverse_string(char arr[])
//{
//	char tem = arr[0];
//	int len = my_strlen(arr);
//	arr[0] = arr[len - 1];
//	arr[len - 1] = '\0';
//	if (my_strlen(arr + 1) >= 2)//2个就会进入进行递归
//	{
//		reverse_string(arr + 1);
//	}
//	arr[len - 1] = tem;
//}
//int main()
//{
//	char arr[] = "abcdefg";
//	reverse_string(arr);
//	printf("%s", arr);
//}



//计算一个数的各个位之和
//采用递归的方法
//#include<stdio.h>
//int print(int i)
//{
//	//1729
//	//1729%10=172+9
//	//172%10=12+2+9
//	if (i > 9)
//	{
//		return print(i / 10) + i % 10;
//	}
//	else
//	{
//		return i;
//	}
//}
//int main()
//{
//	int i = 0;
//	scanf("%d", &i);
//	int x = print(i);
//	printf("%d", x);
//}


//实现n的k次方
#include<stdio.h>
//int print(int i,int j)
//{
//	int count = 1;
//	while (j)
//	{
//		if (j >= 1)
//		{
//			count = count * i;
//			j--;
//		}
//	}
//	return count;
//}
double print(int i, int j)
{
	if (j < 0)
	{
		return (1 / (print(i, -j)));
	}
	else if (j == 0)
	{
		return 1;
	}
	else
	{
		return i * print(i, j - 1);
	}
}
int main()
{
	int i = 0;
	int j = 0;
	scanf("%d %d", &i, &j);
	double x = print(i,j);
	printf("%lf", x);
}
